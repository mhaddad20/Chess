require 'ruby2d'

set background: 'white' # background color
set height: 600
set width: 800

SQUARE_SIZE=60 # size of the squares on the board
class Game
  def initialize # initialise our variables
    $board_pieces=[[],[],[],[],[],[],[],[]] # the board that will hold all the pieces
    $square_position =[] # positions of each square on the screen
    for a in 0..7
      $board_pieces[0].push('')
      $board_pieces[1].push('bp') # add black pawns to the second row
      $board_pieces[2].push('')
      $board_pieces[3].push('')
      $board_pieces[4].push('')
      $board_pieces[5].push('')
      $board_pieces[6].push('wp')# add white pawns to the seventh row
      $board_pieces[7].push('')
    end
    $board_pieces[7][0]='wr' # white rooks
    $board_pieces[7][7]='wr'
    $board_pieces[7][1]='wk' # white knights
    $board_pieces[7][6]='wk'
    $board_pieces[7][2]='wb'# white bishops
    $board_pieces[7][5]='wb'
    $board_pieces[7][4]='wq'# white queen


    $board_pieces[0][0]='br' # black rooks
    $board_pieces[0][7]='br'
    $board_pieces[0][1]='bk' # black knights
    $board_pieces[0][6]='bk'
    $board_pieces[0][2]='bb' # black bishops
    $board_pieces[0][5]='bb'
    $board_pieces[0][4]='bq'# black queen

    $square_chosen=[[],[],[],[],[],[],[],[]] # identify the square chosen by the player(boolean array)
    $valid_moves=[[],[],[],[],[],[],[],[]] # identify which moves are valid for a piece(boolean array)
    $board_colors=['#FFE4BE','#AF6700'] # colors of the the squares on the board
    @add_positions=false
    @square_position_x=0 # get the row the square is on
    @square_position_y=0 # get the column the square is on
  end

  def draw # draw the board
    y=50
    for a in 0..7
      x=150
      arr=[]
      square_chosen=[]
      valid_moves=[]
      for b in 0..7
        if @add_positions==false # populate these arrays
          arr.push([x,y])
          square_chosen.push(false)
          valid_moves.push(false)
        end
        square_color=Square.new(x:x,y:y,color:$board_colors[(b+a)%2],size:SQUARE_SIZE,opacity:0.9) # colors switch every time
        if $board_pieces[a][b]=='wp' # draw the pieces on the board
          Image.new('wp.png',x:x+10,y:y+10)
        elsif $board_pieces[a][b]=='bp'
            Image.new('bp.png',x:x,y:y+5)
        elsif $board_pieces[a][b]=='wb'
          Image.new('white_bishop.png',x:x,y:y)
        elsif $board_pieces[a][b]=='bb'
          Image.new('black_bishop.png',x:x+5,y:y+5)
        elsif $board_pieces[a][b]=='wr'
          Image.new('white_rook.png',x:x+2.5,y:y+7.5)
        elsif $board_pieces[a][b]=='br'
          Image.new('black_rook.png',x:x+2.5,y:y)
        elsif $board_pieces[a][b]=='wk'
          Image.new('white_knight.png',x:x,y:y+2.5)
        elsif $board_pieces[a][b]=='bk'
          Image.new('black_knight.png',x:x,y:y)
        elsif $board_pieces[a][b]=='wq'
          Image.new('white_queen.png',x:x,y:y)
        elsif $board_pieces[a][b]=='bq'
          Image.new('black_queen.png',x:x+2.5,y:y+2.5)
        end
         x+=60
      end
      if @add_positions==false # stop adding to these arrays after the first push
        $square_position.push(arr) # holds the position of each square on the screen
        $square_chosen[a]=square_chosen # detect if square is chosen by player
        $valid_moves[a]=valid_moves  # show valid moves for player
      end
      y+=60
    end
    @add_positions=true
  end

  def first_move_pawn_white?(row,col) # if the white pawn hasn't moved yet
    row==6 && $board_pieces[row][col]=='wp' ? true :false
  end
  def first_move_pawn_black?(row,col) # if the black pawn hasn't moved yet
    row==1 && $board_pieces[row][col]=='bp' ? true :false
  end

  def first_pawn_move(row,col) # discovers which pawn hasn't moved yet
    row==6 && $board_pieces[row][col]=='wp' ?first_move_pawn_white?(row,col) : first_move_pawn_black?(row,col)
  end

  def valid_moves(row,col) # show valid moves for these pieces
    if $board_pieces[row][col]=='wp' # if the player selects the white pawn
      pawn_move('wp',row,col)
    elsif $board_pieces[row][col]=='bp' # if the player selects the black pawn
      pawn_move('bp',row,col)
    elsif $board_pieces[row][col]=='bb'#if player selects the black bishop
      bishop_top_left('bb',row,col)
      bishop_top_right('bb',row,col)
      bishop_bottom_right('bb',row,col)
      bishop_bottom_left('bb',row,col)
    elsif $board_pieces[row][col]=='wb'#if player selects the white bishop
      bishop_top_left('wb',row,col)
      bishop_top_right('wb',row,col)
      bishop_bottom_right('wb',row,col)
      bishop_bottom_left('wb',row,col)
    elsif $board_pieces[row][col]=='wr' # valid moves for the white rook
      rook_forward('wr',row,col)
      rook_right('wr',row,col)
      rook_back('wr',row,col)
      rook_left('wr',row,col)
    elsif $board_pieces[row][col]=='br' # valid moves for the black rook
      rook_forward('br',row,col)
      rook_right('br',row,col)
      rook_back('br',row,col)
      rook_left('br',row,col)
    elsif $board_pieces[row][col]=='wk' # moves for the white knight
      knight_move('wk',row,col)
    elsif $board_pieces[row][col]=='bk' # moves for the black knight
      knight_move('bk',row,col)
    elsif $board_pieces[row][col]=='wq' # moves for the black knight
      queen_move('wq',row,col)
    end
  end
  #color piece means which color was chosen
  # color is true for white and false for black
  def pawn_move(color_piece,row,col)
    color=true #true for white, false for black
    color_piece[0]=='w' ? color=true : color=false #true for white, false for black
    pawn_square=1 # 1 square ahead of the pawn
    pawn_square2=2 # 2 squares ahead of the pawn
    enemy_piece='bp' # the opposite piece
    if color==false # if the color is black
      pawn_square*=-1
      pawn_square2*=-1
      enemy_piece='wp' # change enemy piece
    end
    if first_pawn_move(row,col)#detect which color pawn the player selects and if that pawn has a first move or not
      if $board_pieces[row-pawn_square2][col]==''&&$board_pieces[row-pawn_square][col]==''# advance two squares
        $valid_moves[row-pawn_square2][col]=true
        $valid_moves[row-pawn_square][col]=true
      elsif $board_pieces[row-pawn_square][col]!=nil && $board_pieces[row-pawn_square][col]==''# advance one square
        $valid_moves[row-pawn_square][col]=true
      end
    elsif $board_pieces[row-pawn_square][col]!=nil && $board_pieces[row-pawn_square][col]==''# advance one square
      $valid_moves[row-pawn_square][col]=true
    end
    if col==7 # pawn does not go out of bounds when attacking diagonally
      if $board_pieces[row-pawn_square][col+pawn_square] == enemy_piece #
        $valid_moves[row-pawn_square][col+pawn_square]=true
      end
    elsif col==0 # pawn does not go out of bounds when attacking diagonally
      if $board_pieces[row-pawn_square][col+1] == enemy_piece
        $valid_moves[row-pawn_square][col+1]=true
      end
    elsif $board_pieces[row-pawn_square][col+1]==enemy_piece ||$board_pieces[row-pawn_square][col-1]==enemy_piece#pieces to attack diagonally if there are any
      if $board_pieces[row-pawn_square][col+1]==enemy_piece &&$board_pieces[row-pawn_square][col-1]==enemy_piece
        $valid_moves[row-pawn_square][col+1]=true
        $valid_moves[row-pawn_square][col-1]=true
      elsif $board_pieces[row-pawn_square][col+1]==enemy_piece
        $valid_moves[row-pawn_square][col+1]=true
      elsif $board_pieces[row-pawn_square][col-1]==enemy_piece
        $valid_moves[row-pawn_square][col-1]=true
      end
    end
  end
  def knight_positions(row,col,num) # possible positions for the knight
    if row-num*2>=0 && col-num>=0 && row-num*2<=7 && col-num<=7
      $array_positions.push([row-num*2,col-num])
    end
    if row-num>=0 && col-num*2>=0 && row-num<=7 && col-num*2<=7
      $array_positions.push([row-num,col-num*2])
    end
    if row-num*2<=7 && col+num <=7 && row-num*2>=0 && col+num>=0
      $array_positions.push([row-num*2,col+num])
    end
    if row-num<=7 && col+num*2<=7 && row-num>=0 && col+num*2>=0
      $array_positions.push([row-num,col+num*2])
    end
  end

  def knight_move(color_piece,row,col) # moving the knight
    color=true #true for white, false for black
    color_piece[0]=='w' ? color=true : color=false #true for white, false for black
    $array_positions=[]
    knight_positions(row,col,1)
    knight_positions(row,col,-1)
    $array_positions.each do |x|
      if $board_pieces[x[0]][x[1]]==''
        $valid_moves[x[0]][x[1]]=true
      else
        if piece_capture(color,x[0],x[1])
          $valid_moves[x[0]][x[1]]=true
        end
      end
    end



  end

  def queen_move(color_piece,row,col) # move the queen, same logic as bishop and rook
    rook_forward(color_piece,row,col)
    rook_left(color_piece,row,col)
    rook_right(color_piece,row,col)
    rook_back(color_piece,row,col)
    bishop_bottom_left(color_piece,row,col)
    bishop_bottom_right(color_piece,row,col)
    bishop_top_right(color_piece,row,col)
    bishop_top_left(color_piece,row,col)
  end


  def rook_forward(color_piece,row,col)
    color=true #true for white, false for black
    color_piece[0]=='w' ? color=true : color=false #true for white, false for black
    curr_row=row-1
    curr_col=col
    if row!=0
      until curr_row<0 # let the rook advance forward
        if $board_pieces[curr_row][curr_col]==''
          $valid_moves[curr_row][curr_col]=true
        else
          piece_capture(color,curr_row,curr_col)
          break
        end
        curr_row-=1
      end
    end
  end
  def rook_right(color_piece,row,col)
    color=true #true for white, false for black
    color_piece[0]=='w' ? color=true : color=false #true for white, false for black
    curr_row=row
    curr_col=col+1
    if col!=7
      until curr_col>7 # let the rook advance to the right
        if $board_pieces[curr_row][curr_col]==''
          $valid_moves[curr_row][curr_col]=true
        else
          piece_capture(color,curr_row,curr_col)
          break
        end
        curr_col+=1
      end
    end
  end
  def rook_back(color_piece,row,col)
    color=true #true for white, false for black
    color_piece[0]=='w' ? color=true : color=false #true for white, false for black
    curr_row=row+1
    curr_col=col
    if row!=7
      until curr_row>7 # let the rook move back
        if $board_pieces[curr_row][curr_col]==''
          $valid_moves[curr_row][curr_col]=true
        else
          piece_capture(color,curr_row,curr_col)
          break
        end
        curr_row+=1
      end
    end
  end
  def rook_left(color_piece,row,col)
    color=true #true for white, false for black
    color_piece[0]=='w' ? color=true : color=false #true for white, false for black
    curr_row=row
    curr_col=col-1
    if col!=0
      until curr_col<0 # let the rook move left
        if $board_pieces[curr_row][curr_col]==''
          $valid_moves[curr_row][curr_col]=true
        else
          piece_capture(color,curr_row,curr_col)
          break
        end
        curr_col-=1
      end
    end
  end

  def bishop_top_left(color_piece,row,col)
    color=true
    color_piece[0]=='w' ? color=true : color=false
    curr_row =row-1
    curr_col=col-1
    if row!=0
      until curr_col<0||curr_row<0 #all possible top left bishop squares
        if $board_pieces[curr_row][curr_col]==''
          $valid_moves[curr_row][curr_col]=true
        else
          piece_capture(color,curr_row,curr_col)
          break
        end
        curr_row-=1
        curr_col-=1
      end
    end
  end
  def bishop_top_right(color_piece,row,col)
    color=true
    color_piece[0]=='w' ? color=true : color=false
    curr_row =row-1
    curr_col=col+1
    if row!=0
      until curr_col>7||curr_row<0 #all possible top left bishop squares
        if $board_pieces[curr_row][curr_col]==''
          $valid_moves[curr_row][curr_col]=true
        else
          piece_capture(color,curr_row,curr_col)
          break
        end
        curr_row-=1
        curr_col+=1
      end
    end
  end
  def bishop_bottom_left(color_piece,row,col)
    color=true
    color_piece[0]=='w' ? color=true : color=false
    curr_row =row+1
    curr_col=col-1
    if row!=7
      until curr_col<0||curr_row>7 #all possible top left bishop squares
        if $board_pieces[curr_row][curr_col]==''
          $valid_moves[curr_row][curr_col]=true
        else
          piece_capture(color,curr_row,curr_col)
          break
        end
        curr_row+=1
        curr_col-=1
      end
    end
  end
  def bishop_bottom_right(color_piece,row,col)
    color=true
    color_piece[0]=='w' ? color=true : color=false
    curr_row =row+1
    curr_col=col+1
    if row!=7
      until curr_col>7||curr_row>7 #all possible top left bishop squares
        if $board_pieces[curr_row][curr_col]==''
          $valid_moves[curr_row][curr_col]=true
        else
          piece_capture(color,curr_row,curr_col)
          break
        end
        curr_row+=1
        curr_col+=1
      end
    end
  end

  def piece_capture(color,curr_row,curr_col) # shows which color pieces are valid to attack
    if color # if white, attack the black pieces and vice versa
      if black_pieces(curr_row,curr_col)
        $valid_moves[curr_row][curr_col]=true
      end
    else
      if white_pieces(curr_row,curr_col)
        $valid_moves[curr_row][curr_col]=true
      end
    end
  end

  def black_pieces(row,col)# pieces that white can attack
    pieces = ['bp','bb','br','bk','bq']
    pieces.include?($board_pieces[row][col])
  end

  def white_pieces(row,col) # pieces that black can attack
    pieces=['wp','wb','wr','wk','wq']
    pieces.include?($board_pieces[row][col])
  end




  def select_square # highlights a square when selected by the player
    for row in 0..7
      for col in 0..7
        arr= $square_position[row][col]
        if $square_chosen[row][col]==true
          Square.new(x:arr[0],y:arr[1],color:'yellow',size:SQUARE_SIZE,opacity:0.1)
          #valid_moves(row,col)
          for valid_moves_row in 0..7
            for valid_moves_col in 0..7
              if $valid_moves[valid_moves_row][valid_moves_col]
                arr=$square_position[valid_moves_row][valid_moves_col]
                Square.new(x:arr[0],y:arr[1],color:'#DC3200',size:SQUARE_SIZE,opacity:0.4)
              end
            end
          end
        end
      end
    end
  end

  def select_square_false # stop showing highlighted squares
    for row in 0..7
      for col in 0..7
        $square_chosen[row][col]=false
      end
    end
  end

  def valid_moves_false # stops showing valid moves
    for row in 0..7
      for col in 0..7
        $valid_moves[row][col]=false
      end
    end
  end

  def current_piece?(row,col)# detects if any piece has been chosen
    pieces =['wp','wb','wk','wr','wq','br','bp','bb','bk','bq']
    return true if pieces.include?($board_pieces[row][col])
    false
  end

  def square_chosen_twice # count the number of squares chosen by the player
    count=0
    $square_chosen.each do |x|
      x.each {|y| y==true ? count+=1 :count+=0}
    end
    count
  end

  def square_chosen_index # get the location of the square chosen by the player
    for a in 0..7
      for b in 0..7
        if $square_chosen[a][b]
          @square_position_x=a
          @square_position_y=b
        end
      end
    end
  end

  def square_chosen_index_capturing(row,col) # get the previous location of the square chosen by the player for the purpose of capturing
    for a in 0..7
      for b in 0..7
        if a!=row && b!=col
          if $square_chosen[a][b]
            @square_position_x=a
            @square_position_y=b
          end
        end
      end
    end
  end

  def can_be_captured(row,col) # verify if these pieces can be captured
    pieces = %w[wp wb wk wr wq br bp bb bk bq]
    return true if pieces.include?($board_pieces[row][col])&& $valid_moves[row][col]
    false
  end

  def move(x,y) # update the board on each click
    for row in 0..7
      for col in 0..7
        arr= $square_position[row][col]
        current_square = Square.new(x:arr[0],y:arr[1],opacity:0,size:SQUARE_SIZE)
        if current_square.contains?(x,y) # if the mouse points to a square on the board
          if current_piece?(row,col) # if the mouse points to a chess piece
            if square_chosen_twice>=1 # if squares were chosen twice
              if can_be_captured(row,col) # if the second square is a piece that can be captured
                square_chosen_index # location of the second square
                square_chosen_index_capturing(row,col) # location of the first square
                $board_pieces[row][col]=$board_pieces[@square_position_x][@square_position_y]# update the board to indicate the piece has been captured
                $board_pieces[@square_position_x][@square_position_y]=''#update the board to show the square left by the attacking piece has been marked as empty
                valid_moves_false # hide valid moves
                select_square_false # hide highlighted squares
              else
                valid_moves_false
                select_square_false
              end
            end
            $square_chosen[row][col]=true # show square chosen by the player
            valid_moves(row,col) # display all valid moves
          else
            for a in 0..7
              for b in 0..7
                arr= $square_position[a][b]
                if $valid_moves[a][b]==true
                  if a==row&&b==col # this is to move a piece from one square to another without capturing
                    square_chosen_index
                    $board_pieces[row][col]=$board_pieces[@square_position_x][@square_position_y]
                    $board_pieces[@square_position_x][@square_position_y]=''
                  end
                end
              end
            end
            valid_moves_false
            select_square_false
          end
        end
      end
    end
  end
end

game = Game.new

update do
  clear
  game.draw
  game.select_square
end

on :mouse_down do |event|
  game.move(event.x,event.y)
end

show
